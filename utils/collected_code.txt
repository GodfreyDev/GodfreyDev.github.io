Collected code from D:\Website\GodfreyDev.github.io:



### File: D:\Website\GodfreyDev.github.io\game.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game - Fullscreen Experience</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden; /* Prevent scrolling */
            background-color: #000; /* Background color for areas outside canvas */
        }
        #gameContainer {
            position: relative;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        canvas {
            background-color: #000; /* Game background color */
            image-rendering: pixelated; /* Optional: for pixel art games */
            max-width: 100%;
            max-height: 100vh;
        }
        #chatInput {
            position: absolute;
            bottom: 10px;
            left: 10px;
            width: 300px;
        }
        #dialogueBox {
            position: absolute;
            bottom: 50px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 10px;
            border-radius: 5px;
            display: none;
        }
        #inventory {
            position: absolute;
            top: 10px;
            right: 10px;
            color: white;
        }
        #inventory ul {
            list-style: none;
            padding: 0;
        }
        #inventory ul li {
            background-color: rgba(255, 255, 255, 0.1);
            margin: 5px 0;
            padding: 5px;
            border-radius: 3px;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <canvas id="gameCanvas"></canvas>
        <input type="text" id="chatInput" placeholder="Type your message here..." />
    </div>
    <div id="dialogueBox"></div>
    <div id="inventory">
        <p>Inventory:</p>
        <ul id="inventoryList"></ul>
    </div>

    <script src="https://cdn.socket.io/4.3.2/socket.io.min.js"></script>
    <script src="game.js"></script>
    <script>
        // Event listener for chat input to handle message sending on Enter key
        document.getElementById('chatInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
</body>
</html>


### File: D:\Website\GodfreyDev.github.io\game.js

// # game.js

const serverUrl = window.location.hostname === 'godfreydev.github.io'
  ? 'https://cool-accessible-pint.glitch.me'
  : 'http://localhost:3000';

const socket = io.connect(serverUrl);

// Directions based on sprite sheet layout
const DIRECTIONS = {
  DOWN: 0, LEFT: 1, RIGHT: 2, UP: 3, DOWN_LEFT: 4, DOWN_RIGHT: 5, UP_LEFT: 6, UP_RIGHT: 7
};

// Game world configuration
const TILE_SIZE = 64;
const WORLD_WIDTH = 200;
const WORLD_HEIGHT = 200;

// Tile types
const TILE_WALL = 1;
const TILE_DOOR = 2;
const TILE_FLOOR = 3;

// Game world array
let gameWorld = [];

// Adjust the player's initial position here
// Set initial position to the bottom right, but keep it centered in the viewport initially
let player = {
  id: null, x: 100, y: 100, width: 64, height: 64, // Adjust initial x, y to move player down and right from the center
  direction: DIRECTIONS.DOWN, moving: false, sprite: new Image(),
  frameIndex: 0, frameCount: 8
};
player.sprite.src = 'Images/player_sprite_frames.png';
player.sprite.onload = () => requestAnimationFrame(gameLoop);
player.sprite.onerror = e => console.error("Failed to load player sprite:", e);

let players = {}, playerMessages = {}, items = {}, inventory = [], keysPressed = {};
const movementSpeed = 200, animationSpeed = 0.1;
let lastRenderTime = 0, animationTimer = 0;

const canvas = document.getElementById('gameCanvas'), ctx = canvas.getContext('2d');

// Function to adjust the canvas size dynamically
function adjustCanvasSize() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
}
adjustCanvasSize(); // Adjust canvas size on initial load
window.addEventListener('resize', adjustCanvasSize); // Adjust canvas size on window resize

// Load tile images
const tileImages = {};
const tileTypes = [TILE_FLOOR, TILE_WALL, TILE_DOOR];
let loadedImages = 0;

function loadTileImage(type) {
    tileImages[type] = new Image();
    tileImages[type].src = `Images/tile_${type}.png`;
    tileImages[type].onload = () => {
        loadedImages++;
        if (loadedImages === tileTypes.length) {
          requestAnimationFrame(gameLoop);
        }
      };      
    tileImages[type].onerror = () => {
      console.error(`Failed to load tile image: Images/tile_${type}.png`);
    };
  }
  

tileTypes.forEach(loadTileImage);

// Initialize the game world
function initializeGameWorld() {
  for (let y = 0; y < WORLD_HEIGHT; y++) {
    gameWorld[y] = [];
    for (let x = 0; x < WORLD_WIDTH; x++) {
      if (x === 0 || x === WORLD_WIDTH - 1 || y === 0 || y === WORLD_HEIGHT - 1) {
        gameWorld[y][x] = TILE_WALL;
      } else {
        gameWorld[y][x] = TILE_FLOOR;
      }
    }
  }
  
  // Create rooms and corridors
  createRoom(20, 20, 40, 40);
  createRoom(80, 80, 60, 60);
  createRoom(20, 120, 50, 50);
  createRoom(120, 20, 60, 40);
  
  createCorridor(50, 30, 80, 30);
  createCorridor(30, 50, 30, 120);
  createCorridor(130, 50, 130, 80);
  createCorridor(70, 110, 120, 110);
}

// Create a room with walls and a door
function createRoom(x, y, width, height) {
  for (let i = y; i < y + height; i++) {
    for (let j = x; j < x + width; j++) {
      if (i === y || i === y + height - 1 || j === x || j === x + width - 1) {
        gameWorld[i][j] = TILE_WALL;
      } else {
        gameWorld[i][j] = TILE_FLOOR;
      }
    }
  }
  gameWorld[y + Math.floor(height / 2)][x] = TILE_DOOR;
}

// Create a corridor between two points
function createCorridor(x1, y1, x2) {
  const dx = x2 - x1;
  const dy = y2 - y1;
  const length = Math.max(Math.abs(dx), Math.abs(dy));
  
  for (let i = 0; i <= length; i++) {
    const x = x1 + Math.round(i * dx / length);
    const y = y1 + Math.round(i * dy / length);
    gameWorld[y][x] = TILE_FLOOR;
  }
}

// Game loop for rendering and updating
function gameLoop(timeStamp) {
    const deltaTime = (timeStamp - lastRenderTime) / 1000;
    requestAnimationFrame(gameLoop);
    if (player.id) {
      updatePlayerPosition(deltaTime);
      handleAnimation(deltaTime);
      updateCameraPosition();
    }
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    updatePlayerPosition(deltaTime);
    handleAnimation(deltaTime);
    updateCameraPosition();
    drawBackground();
    drawItems();
    drawPlayers();
    lastRenderTime = timeStamp;
}

// Function to draw items
function drawItems() {
  Object.values(items).forEach(item => {
    ctx.fillStyle = item.type === 'potion' ? 'red' : item.type === 'sword' ? 'silver' : 'blue';
    ctx.fillRect(item.x - cameraX, item.y - cameraY, TILE_SIZE, TILE_SIZE);
  });
}

// Send chat message to the server
function sendMessage() {
  const messageInput = document.getElementById('chatInput'), message = messageInput.value.trim();
  if (message) {
    socket.emit('chatMessage', { message });
    messageInput.value = '';
  }
}

// Update player position based on input with adjusted collision detection
function updatePlayerPosition(deltaTime) {
    let dx = 0, dy = 0;
    player.moving = false;
  
    if (keysPressed['a'] || keysPressed['ArrowLeft']) { dx -= movementSpeed; player.moving = true; }
    if (keysPressed['d'] || keysPressed['ArrowRight']) { dx += movementSpeed; player.moving = true; }
    if (keysPressed['w'] || keysPressed['ArrowUp']) { dy -= movementSpeed; player.moving = true; }
    if (keysPressed['s'] || keysPressed['ArrowDown']) { dy += movementSpeed; player.moving = true; }
  
    if (dy < 0 && dx < 0) player.direction = DIRECTIONS.UP_LEFT;
    else if (dy < 0 && dx > 0) player.direction = DIRECTIONS.UP_RIGHT;
    else if (dy > 0 && dx < 0) player.direction = DIRECTIONS.DOWN_LEFT;
    else if (dy > 0 && dx > 0) player.direction = DIRECTIONS.DOWN_RIGHT;
    else if (dy < 0) player.direction = DIRECTIONS.UP;
    else if (dy > 0) player.direction = DIRECTIONS.DOWN;
    else if (dx < 0) player.direction = DIRECTIONS.LEFT;
    else if (dx > 0) player.direction = DIRECTIONS.RIGHT;
  
    const newX = player.x + dx * deltaTime;
    const newY = player.y + dy * deltaTime;
  
    // Check collision for each corner of the player sprite
    const topLeftTile = gameWorld[Math.floor((newY - player.height / 2) / TILE_SIZE)][Math.floor((newX - player.width / 2) / TILE_SIZE)];
    const topRightTile = gameWorld[Math.floor((newY - player.height / 2) / TILE_SIZE)][Math.floor((newX + player.width / 2) / TILE_SIZE)];
    const bottomLeftTile = gameWorld[Math.floor((newY + player.height / 2) / TILE_SIZE)][Math.floor((newX - player.width / 2) / TILE_SIZE)];
    const bottomRightTile = gameWorld[Math.floor((newY + player.height / 2) / TILE_SIZE)][Math.floor((newX + player.width / 2) / TILE_SIZE)];
  
    // Check if any of the corners collide with a wall
    const collidesWithWall = topLeftTile === TILE_WALL || topRightTile === TILE_WALL || bottomLeftTile === TILE_WALL || bottomRightTile === TILE_WALL;
  
    // Check if the player is colliding with a door
    const collidesWithDoor = topLeftTile === TILE_DOOR || topRightTile === TILE_DOOR || bottomLeftTile === TILE_DOOR || bottomRightTile === TILE_DOOR;
  
    if (!collidesWithWall && !collidesWithDoor) {
      player.x = newX;
      player.y = newY;
    }
  
    if (collidesWithDoor) {
        // Calculate the door's center position
        const doorCenterX = Math.floor((newX + player.width / 2) / TILE_SIZE) * TILE_SIZE + TILE_SIZE / 2;
        const doorCenterY = Math.floor((newY + player.height / 2) / TILE_SIZE) * TILE_SIZE + TILE_SIZE / 2;
    
        // Calculate the player's distance from the door's center
        const distanceX = doorCenterX - player.x;
        const distanceY = doorCenterY - player.y;
    
        // Adjust the player's position to smoothly pass through the door
        if (Math.abs(distanceX) < TILE_SIZE / 4) {
          player.x += distanceX * 0.2; // Adjust the player's x-position gradually
        }
        if (Math.abs(distanceY) < TILE_SIZE / 4) {
          player.y += distanceY * 0.2; // Adjust the player's y-position gradually
        }
    
        // Move the player through the door based on their direction
        if (player.direction === DIRECTIONS.UP) {
          player.y -= player.height / 4; // Adjust the player's y-position gradually
        } else if (player.direction === DIRECTIONS.DOWN) {
          player.y += player.height / 4; // Adjust the player's y-position gradually
        } else if (player.direction === DIRECTIONS.LEFT) {
          player.x -= player.width / 4; // Adjust the player's x-position gradually
        } else if (player.direction === DIRECTIONS.RIGHT) {
          player.x += player.width / 4; // Adjust the player's x-position gradually
        }
      }
  
    // Check for item pickup
    Object.values(items).forEach(item => {
      if (Math.abs(player.x - item.x) < TILE_SIZE && Math.abs(player.y - item.y) < TILE_SIZE) {
        socket.emit('pickupItem', item.id);
      }
    });
  
    // Emit movement if position or frameIndex changed
    if (newX !== player.x || newY !== player.y || player.frameIndex !== player.lastFrameIndex) {
      player.lastFrameIndex = player.frameIndex;
      socket.emit('playerMovement', { x: player.x, y: player.y, direction: player.direction, frameIndex: player.frameIndex });
    }
  }  

// Handle animation based on player movement
function handleAnimation(deltaTime) {
  if (player.moving) {
    animationTimer += deltaTime;
    if (animationTimer >= animationSpeed) {
      player.frameIndex = (player.frameIndex + 1) % player.frameCount;
      animationTimer = 0;
    }
  } else {
    player.frameIndex = 0; // Reset animation frame if not moving
  }
  player.frameIndex = Math.max(0, Math.min(player.frameIndex, player.frameCount - 1)); // Ensure frameIndex is within valid range
}

let cameraX = 0;
let cameraY = 0;
const cameraEasing = 0.1;

function updateCameraPosition() {
  const targetX = player.x - canvas.width / 2;
  const targetY = player.y - canvas.height / 2;
  cameraX += (targetX - cameraX) * cameraEasing;
  cameraY += (targetY - cameraY) * cameraEasing;
}

function drawBackground() {
    const startCol = Math.max(0, Math.floor(cameraX / TILE_SIZE));
    const endCol = Math.min(WORLD_WIDTH - 1, Math.ceil((cameraX + canvas.width) / TILE_SIZE));
    const startRow = Math.max(0, Math.floor(cameraY / TILE_SIZE));
    const endRow = Math.min(WORLD_HEIGHT - 1, Math.ceil((cameraY + canvas.height) / TILE_SIZE));
  
    ctx.save();
    ctx.translate(-cameraX, -cameraY);
  
    // Fill the canvas with black
    ctx.fillStyle = 'black';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
  
    for (let y = startRow; y <= endRow; y++) {
      for (let x = startCol; x <= endCol; x++) {
        const tileX = x * TILE_SIZE;
        const tileY = y * TILE_SIZE;
  
        // Check if the tile exists in the gameWorld array
        if (gameWorld[y] && gameWorld[y][x]) {
            const tile = gameWorld[y][x];
            if (tileImages[tile]) {
              ctx.drawImage(tileImages[tile], tileX, tileY, TILE_SIZE, TILE_SIZE);
            }            
        }
      }
    }
  
    ctx.restore();
  }  

// Render players on canvas
function drawPlayers() {
  Object.values(players).forEach(drawPlayer);
  drawPlayer(player); // Draw current player last to be on top
}

// Draw a single player on the canvas
function drawPlayer(p) {
    if (!p.sprite.complete || p.frameIndex === undefined) return;
    const srcX = p.frameIndex * p.width;
    const srcY = p.direction * p.height;
    const screenX = p.x - p.width / 2;
    const screenY = p.y - p.height / 2;
  
    ctx.drawImage(p.sprite, srcX, srcY, p.width, p.height, screenX - cameraX, screenY - cameraY, p.width, p.height);
    ctx.fillStyle = 'white'; ctx.textAlign = 'center'; ctx.font = '16px Arial';
    ctx.fillText(p.name, screenX - cameraX + p.width / 2, screenY - cameraY - 20);
    if (playerMessages[p.id]) {
      ctx.fillStyle = 'yellow';
      ctx.fillText(playerMessages[p.id], screenX - cameraX + p.width / 2, screenY - cameraY - 40);
    }
  }

// Handle receiving items from the server
socket.on('currentItems', serverItems => {
  items = serverItems;
});

// Handle item pickup
socket.on('itemPickedUp', data => {
  delete items[data.itemId];
  if (data.playerId === player.id) {
    inventory.push(data.itemId); // Add item to inventory if it's the local player
    updateInventoryDisplay();
  }
});

// Handle player damage
socket.on('playerDamaged', data => {
  if (players[data.targetId]) {
    players[data.targetId].health = data.health;
  }
});

// Handle player killed
socket.on('playerKilled', playerId => {
  delete players[playerId];
});

// Keyboard event listeners for movement
document.addEventListener('keydown', e => keysPressed[e.key] = true);
document.addEventListener('keyup', e => delete keysPressed[e.key]);

// After receiving the current players from the server and setting up the local player
socket.on('currentPlayers', playersData => {
    Object.values(playersData).forEach(p => {
      p.sprite = new Image();
      p.sprite.src = player.sprite.src;
      if (p.id === socket.id) {
        // This part assumes you somehow receive your own player data back from the server
        player = { ...player, ...p };
        player.sprite = new Image();
        player.sprite.src = 'Images/player_sprite_frames.png'; // Ensure the sprite is correctly assigned
        
        // Emit the player's initial state right after receiving it
        socket.emit('playerMovement', {
          x: player.x,
          y: player.y,
          direction: player.direction,
          moving: player.moving,
          frameIndex: player.frameIndex
        });
      } else {
        players[p.id] = p;
      }
    });
  });
  

socket.on('newPlayer', playerData => {
  players[playerData.id] = Object.assign(playerData, { sprite: new Image(), frameIndex: 0, direction: DIRECTIONS.DOWN });
  players[playerData.id].sprite.src = player.sprite.src;
});

socket.on('playerMoved', data => {
  if (data.playerId in players) {
    players[data.playerId].x = data.x;
    players[data.playerId].y = data.y;
    players[data.playerId].direction = data.direction;
    players[data.playerId].frameIndex = data.frameIndex;
  }
});

socket.on('playerDisconnected', id => delete players[id]);
socket.on('chatMessage', data => {
  playerMessages[data.playerId] = data.message;
  setTimeout(() => delete playerMessages[data.playerId], 5000);
});

// Initialize the game world
initializeGameWorld();
requestAnimationFrame(gameLoop);

// Update inventory display
function updateInventoryDisplay() {
  const inventoryList = document.getElementById('inventoryList');
  inventoryList.innerHTML = '';
  inventory.forEach(item => {
    const li = document.createElement('li');
    li.textContent = item;
    inventoryList.appendChild(li);
  });
}


### File: D:\Website\GodfreyDev.github.io\index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gavin - Game Developer & Programmer</title>
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap">
    <!-- Font Awesome for Icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Vis Network CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis-network.min.css" />
    <!-- Stylesheet -->
    <link rel="stylesheet" href="css/style.css">
    <!-- Particles.js -->
    <script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
</head>
<body class="light-mode">
    <!-- Header -->
    <header>
        <div class="container">
            <h1><a href="#hero">Gavin</a></h1>
            <nav>
                <ul>
                    <li><a href="#about">About</a></li>
                    <li><a href="#skills">Skills</a></li>
                    <li><a href="#projects">Projects</a></li>
                    <li><a href="#game">Game</a></li>
                    <li><a href="#wiki">Wiki</a></li>
                    <li><a href="#contact">Contact</a></li>
                </ul>
            </nav>
            <div class="social-buttons">
                <a href="https://github.com/GodfreyDev" target="_blank" rel="noopener noreferrer" aria-label="GitHub">
                    <i class="fab fa-github"></i>
                </a>
                <a href="https://linkedin.com/in/yourprofile" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
                    <i class="fab fa-linkedin"></i>
                </a>
                <a href="https://discord.gg/HxTwUcGaPY" target="_blank" rel="noopener noreferrer" aria-label="Discord">
                    <i class="fab fa-discord"></i>
                </a>
                <button class="social-button onlyfans" onclick="handleOnlyFansClick()" aria-label="OnlyFans">
                    <i class="fab fa-onlyfans"></i>
                </button>
                <!-- OnlyFans Message -->
                <span id="onlyfans-message" style="display:none; margin-left: 10px;"></span>
            </div>
            <button class="theme-toggle" onclick="toggleTheme()" aria-label="Toggle dark mode">
                <span id="toggle-icon"></span>
            </button>
            <div class="hamburger" aria-label="Toggle navigation" aria-expanded="false">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </header>

    <!-- Particle Background -->
    <div id="particles-js"></div>

    <!-- Hero Section -->
    <section id="hero">
        <div class="container">
            <h2>Welcome to My World of Code & Creativity</h2>
            <p>I'm Gavin, a passionate game developer and programmer dedicated to creating immersive and interactive experiences.</p>
            <a href="#projects" class="btn">Explore My Work</a>
        </div>
    </section>

    <!-- About Section -->
    <section id="about">
        <div class="container">
            <h2>About Me</h2>
            <div class="about-content">
                <img src="images/profile.jpg" alt="Gavin's Profile Picture" class="profile-pic">
                <div class="about-text">
                    <p>Hello! I'm Gavin, a dedicated student at Towson University, specializing in game development and programming. I thrive on turning ideas into reality through code and creativity. When I'm not coding, I enjoy playing video games, exploring new technologies, and collaborating on exciting projects.</p>
                    <div class="countdown-container">
                        <input type="date" id="dateInput" min="2024-01-01" aria-label="Select countdown date">
                        <button onclick="setCountdownDate()" aria-label="Set countdown date">Set Date</button>
                    </div>
                    <div id="countdown" aria-live="polite"></div>
                </div>
            </div>
        </div>
    </section>

    <!-- Skills Section -->
    <section id="skills">
        <div class="container">
            <h2>Skills & Expertise</h2>
            <div class="skills-grid">
                <div class="skill">
                    <i class="fas fa-code"></i>
                    <h3>Programming</h3>
                    <p>Proficient in languages like C++, Python, and JavaScript. Experienced in object-oriented programming and software development best practices.</p>
                </div>
                <div class="skill">
                    <i class="fas fa-gamepad"></i>
                    <h3>Game Development</h3>
                    <p>Skilled in using game engines such as Unity and Unreal Engine. Passionate about creating engaging and interactive gaming experiences.</p>
                </div>
                <div class="skill">
                    <i class="fas fa-database"></i>
                    <h3>Database Management</h3>
                    <p>Experienced with SQL and NoSQL databases, ensuring efficient data storage and retrieval for applications.</p>
                </div>
                <div class="skill">
                    <i class="fas fa-mobile-alt"></i>
                    <h3>Mobile Development</h3>
                    <p>Developing responsive and user-friendly mobile applications for both Android and iOS platforms.</p>
                </div>
            </div>
        </div>
    </section>

    <!-- Projects Section -->
    <section id="projects">
        <div class="container">
            <h2>Featured Projects</h2>
            <div class="projects-grid">
                <!-- Project 1 -->
                <div class="project-card">
                    <img src="images/project1.jpg" alt="Epic Adventure Game Screenshot" loading="lazy">
                    <div class="project-info">
                        <h3>Epic Adventure Game</h3>
                        <p>A fully immersive RPG game developed using Unity, featuring rich storytelling and dynamic gameplay.</p>
                        <a href="https://github.com/GodfreyDev/epic-adventure" target="_blank" rel="noopener noreferrer" class="btn">View on GitHub</a>
                    </div>
                </div>
                <!-- Project 2 -->
                <div class="project-card">
                    <img src="images/project2.jpg" alt="AI Chatbot Screenshot" loading="lazy">
                    <div class="project-info">
                        <h3>AI Chatbot</h3>
                        <p>An intelligent chatbot built with Python and machine learning algorithms, capable of engaging in natural conversations.</p>
                        <a href="https://github.com/GodfreyDev/ai-chatbot" target="_blank" rel="noopener noreferrer" class="btn">View on GitHub</a>
                    </div>
                </div>
                <!-- Project 3 -->
                <div class="project-card">
                    <img src="images/project3.jpg" alt="Mobile Fitness App Screenshot" loading="lazy">
                    <div class="project-info">
                        <h3>Mobile Fitness App</h3>
                        <p>A responsive mobile application designed to help users track their fitness goals and monitor progress.</p>
                        <a href="https://github.com/GodfreyDev/fitness-app" target="_blank" rel="noopener noreferrer" class="btn">View on GitHub</a>
                    </div>
                </div>
                <!-- Example Project Placeholder -->
                <div class="project-card">
                    <img src="images/example-project.jpg" alt="Example Project Screenshot" loading="lazy">
                    <div class="project-info">
                        <h3>Example Project</h3>
                        <p>This is an example project description. Details will be added once the project is completed.</p>
                        <a href="#" class="btn disabled" aria-disabled="true">Coming Soon</a>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Game Section -->
    <section id="game">
        <div class="container">
            <h2>Explore My World!</h2>
            <p>Check out my game for a full-screen immersive experience.</p>
            <a href="game.html" target="_blank" class="btn">Play Game</a>
        </div>
    </section>

    <!-- Wiki Section -->
    <section id="wiki">
        <div class="container">
            <h2>Wiki</h2>
            <nav id="wiki-navigation"></nav>
            <input type="text" id="wiki-search" placeholder="Search the wiki..." aria-label="Search the wiki">
            <div id="wiki-content">
                <!-- Markdown content will be loaded here -->
            </div>
            <div id="graph-container">
                <!-- Graph visualization will be rendered here -->
            </div>
        </div>
    </section>

    <!-- Contact Section -->
    <section id="contact">
        <div class="container">
            <h2>Get In Touch</h2>
            <p>Whether you have a question, want to collaborate, or just want to say hi, feel free to reach out!</p>
            <form action="https://formspree.io/f/mwkajqvy" method="POST" aria-label="Contact form">
                <div class="form-group">
                    <label for="name">Name</label>
                    <input type="text" id="name" name="name" required placeholder="Your Name">
                </div>
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" name="_replyto" required placeholder="Your Email">
                </div>
                <div class="form-group">
                    <label for="message">Message</label>
                    <textarea id="message" name="message" rows="5" required placeholder="Your Message"></textarea>
                </div>
                <button type="submit" class="btn">Send Message</button>
            </form>
            <div class="social-links">
                <a href="https://github.com/GodfreyDev" target="_blank" rel="noopener noreferrer" aria-label="GitHub"><i class="fab fa-github"></i></a>
                <a href="https://linkedin.com/in/yourprofile" target="_blank" rel="noopener noreferrer" aria-label="LinkedIn"><i class="fab fa-linkedin"></i></a>
                <a href="https://twitter.com/yourprofile" target="_blank" rel="noopener noreferrer" aria-label="Twitter"><i class="fab fa-twitter"></i></a>
                <!-- Add more social links as needed -->
            </div>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <div class="container">
            <p>&copy; 2024 Gavin. All rights reserved.</p>
            <nav>
                <a href="#hero">Home</a> |
                <a href="#about">About</a> |
                <a href="#skills">Skills</a> |
                <a href="#projects">Projects</a> |
                <a href="#game">Game</a> |
                <a href="#wiki">Wiki</a> |
                <a href="#contact">Contact</a>
            </nav>
        </div>
    </footer>

    <!-- Scripts -->
    <script src="js/main.js"></script>
    <!-- Initialize Particles.js -->
    <script>
        particlesJS.load('particles-js', 'js/particles.json', function() {
            console.log('Particles.js loaded - callback');
        });
    </script>
    <!-- Vis Network JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis-network.min.js"></script>
    <!-- Additional Scripts for Wiki and Graph Visualization -->
    <script src="js/wiki.js"></script>
    <script src="js/graph.js"></script>
</body>
</html>


### File: D:\Website\GodfreyDev.github.io\package-lock.json

{
  "name": "GodfreyDev.github.io",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "dependencies": {
        "express": "^4.19.2",
        "socket.io": "^4.7.5"
      }
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.0.tgz",
      "integrity": "sha512-+9jVqKhRSpsc591z5vX+X5Yyw+he/HCB4iQ/RYxw35CEPaY1gnsNE43nf9n9AaYjAQrTiI/mOwKUKdUs9vf7Xg=="
    },
    "node_modules/@types/cookie": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/@types/cookie/-/cookie-0.4.1.tgz",
      "integrity": "sha512-XW/Aa8APYr6jSVVA1y/DEIZX0/GMKLEVekNG727R8cs56ahETkRAy/3DR7+fJyh7oUgGwNQaRfXCun0+KbWY7Q=="
    },
    "node_modules/@types/cors": {
      "version": "2.8.17",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.17.tgz",
      "integrity": "sha512-8CGDvrBj1zgo2qE+oS3pOCyYNqCPryMWY2bGfwA0dcfopWGgxs+78df0Rs3rc9THP4JkOhLsAa+15VdpAqkcUA==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "20.12.5",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.12.5.tgz",
      "integrity": "sha512-BD+BjQ9LS/D8ST9p5uqBxghlN+S42iuNxjsUGjeZobe/ciXzk2qb1B6IXc6AnRLS+yFJRpN2IPEHMzwspfDJNw==",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg=="
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/body-parser": {
      "version": "1.20.2",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.2.tgz",
      "integrity": "sha512-ml9pReCu3M61kGlqoTm2umSXTlRTuGTx0bfYj+uIUKKYycG5NtSbeetV3faSU6R7ajOPw0g/J1PvK4qNy7s5bA==",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.11.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.6.0.tgz",
      "integrity": "sha512-U71cyTamuh1CRNCfpGY6to28lxvNwPG4Guz/EVjgf3Jmzv0vlDp1atT9eS5dDjMYHucpHbWns6Lwf3BKz6svdw==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ=="
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow=="
    },
    "node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/engine.io": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.5.4.tgz",
      "integrity": "sha512-KdVSDKhVKyOi+r5uEabrDLZw2qXStVvCsEB/LN3mw4WFi6Gx50jTyuxYVCwAAC0U46FdnzP/ScKRBTXb/NiEOg==",
      "dependencies": {
        "@types/cookie": "^0.4.1",
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.4.1",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.11.0"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.2.tgz",
      "integrity": "sha512-RcyUFKA93/CXH20l4SoVvzZfrSDMOTUS3bWVpTt2FuFP+XYrL8i8oonHP7WInRyVHXh0n/ORtoeiE1os+8qkSw==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.2.tgz",
      "integrity": "sha512-aSWTXFzaKWkvHO1Ny/s+ePFpvKsPnjc551iI41v3ny/ow6tBG5Vd+FuqGNhh1LxOmVzOlGUriIlOaokOvhaStA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/es-define-property": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
      "dependencies": {
        "get-intrinsic": "^1.2.4"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow=="
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/express": {
      "version": "4.19.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.19.2.tgz",
      "integrity": "sha512-5T6nhjsT+EOMzuck8JjBHARTHfMht0POzlA60WV2pMD3gyXw2LZnZ+ueGdNxG+0calOJcWKbpFcuzLZ91YWq9Q==",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.2",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.6.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.2.0",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.7",
        "qs": "6.11.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.18.0",
        "serve-static": "1.15.0",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.2.0.tgz",
      "integrity": "sha512-5uXcUVftlQMFnWC9qu/svkWv3GTd2PfUhK/3PLkYNAe7FbqJMt3515HaxE6eRL74GdsriiwujiawdaB1BpEISg==",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "has-proto": "^1.0.1",
        "has-symbols": "^1.0.3",
        "hasown": "^2.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
      "dependencies": {
        "get-intrinsic": "^1.1.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha512-cCi6g3/Zr1iqQi6ySbseM1Xvooa98N0w31jzUYrXPX2xqObmFGHJ0tQ5u74H3mVh7wLouTseZyYIq39g8cNp1w=="
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.1.tgz",
      "integrity": "sha512-5qoj1RUiKOMsCCNLV1CBiPYE10sziTsnmNxkAI/rZhiD63CF7IqdFGC/XzjWjpSgLf0LxXX3bDFIh0E18f6UhQ==",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha512-5DFkuoqlv1uYQKxy8omFBeJPQcdoE07Kv2sferDCrAq1ohOU+MSDswDIbnx3YAM60qIOnYa53wBhXW0EbMonrQ=="
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/qs": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.11.0.tgz",
      "integrity": "sha512-MvjoMCJwEarSbUYk5O+nmoSzSutSsTwF85zcHPQ9OrlFoZOYIjaqBAJIqIXjptyD5vThxGq52Xu/MaJzRkIk4Q==",
      "dependencies": {
        "side-channel": "^1.0.4"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ]
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "node_modules/send": {
      "version": "0.18.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.18.0.tgz",
      "integrity": "sha512-qqWzuOjSFOuqPjFe4NOsMLafToQQwBSOEpS+FwEt3A2V3vKubTquT3vmLTQpFgMXp8AlFWFuP1qKaJZOtPpVXg==",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "node_modules/serve-static": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.15.0.tgz",
      "integrity": "sha512-XGuRDNjXUijsUL0vl6nSD7cwURuzEgglbOaFuZM9g3kwDXOWVTck0jLzjPzGD+TazWbboZYu52/9/XPdUgne9g==",
      "dependencies": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.18.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/side-channel": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
      "dependencies": {
        "call-bind": "^1.0.7",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.4",
        "object-inspect": "^1.13.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/socket.io": {
      "version": "4.7.5",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.7.5.tgz",
      "integrity": "sha512-DmeAkF6cwM9jSfmp6Dr/5/mfMwb5Z5qRrSXLpo3Fq5SqyU8CMF15jIN4ZhfSwu35ksM1qmHZDQ/DK5XTccSTvA==",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.5.2",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.4",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.4.tgz",
      "integrity": "sha512-wDNHGXGewWAjQPt3pyeYBtpWSq9cLE5UW1ZUPL/2eGK9jtse/FpXib7epSTsz0Q0m+6sg6Y4KtcFTlah1bdOVg==",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.11.0"
      }
    },
    "node_modules/socket.io-adapter/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-adapter/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/socket.io/node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA=="
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/ws": {
      "version": "8.11.0",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.11.0.tgz",
      "integrity": "sha512-HPG3wQd9sNQoT9xHyNCXoDUa+Xw/VevmY9FoHyQ+g+rrMn4j6FB4np7Z0OhdTgjx6MgQLK7jwSy1YecU1+4Asg==",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}


### File: D:\Website\GodfreyDev.github.io\package.json

{
  "dependencies": {
    "express": "^4.19.2",
    "socket.io": "^4.7.5"
  }
}


### File: D:\Website\GodfreyDev.github.io\server.js

const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: '*',
    methods: ['GET', 'POST'],
    credentials: true
  }
});

// Enable CORS for all routes
app.use((req, res, next) => {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

// Structure to hold player data
let players = {};
let items = {}; // To store items on the server

// Arrays of adjectives and nouns for player name generation
const adjectives = ['Quick', 'Lazy', 'Jolly', 'Brave', 'Clever', 'Wise', 'Fierce', 'Gentle', 'Loyal'];
const nouns = ['Fox', 'Bear', 'Dragon', 'Wolf', 'Tiger', 'Rabbit', 'Eagle', 'Owl', 'Lion'];

// Function to return a random element from an array
function getRandomElement(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// Generates a unique player name
function generatePlayerName() {
  return `${getRandomElement(adjectives)}${getRandomElement(nouns)}${Math.floor(Math.random() * 100)}`;
}

// Generate random items in the world
function generateItems() {
  for (let i = 0; i < 50; i++) {
    const id = `item${i}`;
    items[id] = {
      id,
      x: Math.floor(Math.random() * 200 * 64),
      y: Math.floor(Math.random() * 200 * 64),
      type: getRandomElement(['sword', 'shield', 'potion'])
    };
  }
}

// Handle socket.io connections
io.on('connection', (socket) => {
  console.log(`A user connected: ${socket.id}`);
  const playerName = generatePlayerName();

  // Initialize player data
  players[socket.id] = {
    id: socket.id,
    name: playerName,
    x: 400,
    y: 300,
    direction: 0, // Default direction
    moving: false,
    width: 64, // Sprite width
    height: 64, // Sprite height
    health: 100, // Player health
    inventory: [] // Player inventory
  };

  // Emit current players and items to the newly connected player
  socket.emit('currentPlayers', players);
  socket.emit('currentItems', items);

  // Broadcast new player's arrival to other players
  socket.broadcast.emit('newPlayer', players[socket.id]);

  // Update player position and direction based on movement
  socket.on('playerMovement', (data) => {
    if (players[socket.id]) {
      players[socket.id].x = data.x;
      players[socket.id].y = data.y;
      players[socket.id].direction = data.direction;
      players[socket.id].frameIndex = data.frameIndex;

      // Broadcast the updated player position and frameIndex to other players
      socket.broadcast.emit('playerMoved', {
        playerId: socket.id,
        x: data.x,
        y: data.y,
        direction: data.direction,
        frameIndex: data.frameIndex
      });
    }
  });

  // Handle chat messages
  socket.on('chatMessage', (data) => {
    io.emit('chatMessage', { playerId: socket.id, message: data.message });
  });

  // Handle item pickup
  socket.on('pickupItem', (itemId) => {
    if (items[itemId]) {
      players[socket.id].inventory.push(items[itemId].type);
      delete items[itemId];
      io.emit('itemPickedUp', { playerId: socket.id, itemId });
    }
  });

  // Handle combat
  socket.on('attack', (targetId) => {
    if (players[targetId]) {
      players[targetId].health -= 10; // Example damage value
      if (players[targetId].health <= 0) {
        io.emit('playerKilled', targetId);
        delete players[targetId];
      } else {
        io.emit('playerDamaged', { targetId, health: players[targetId].health });
      }
    }
  });

  // Handle player disconnection
  socket.on('disconnect', () => {
    console.log(`User disconnected: ${socket.id}`);
    delete players[socket.id];
    io.emit('playerDisconnected', socket.id);
  });
});

// Initialize items
generateItems();

// Determine the server URL based on the environment
const serverUrl = process.env.NODE_ENV === 'production'
  ? 'https://cool-accessible-pint.glitch.me'
  : 'http://localhost:3000';

// Listen on the specified port
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => console.log(`Server running on ${serverUrl}:${PORT}`));


### File: D:\Website\GodfreyDev.github.io\css\style.css

/* # css/style.css */

/* General Styles */
body {
    margin: 0;
    padding: 0;
    font-family: 'Roboto', sans-serif;
    background-color: #f5f5f5;
    color: #333;
    transition: background-color 0.4s ease, color 0.4s ease;
    line-height: 1.6;
    padding-top: 80px; /* Prevent content from being hidden behind the fixed header */
}

body.light-mode {
    background-color: #f5f5f5;
    color: #333;
}

body.dark-mode {
    background-color: #1a1a1a;
    color: #ccc;
}

/* Container */
.container {
    width: 90%;
    max-width: 1200px;
    margin: auto;
    padding: 40px 0;
}

/* Header */
header {
    padding: 10px 20px;
    width: 100%;
    background: rgba(255, 255, 255, 0.9);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    transition: background-color 0.4s ease, box-shadow 0.4s ease;
}

body.dark-mode header {
    background: rgba(26, 26, 26, 0.9);
}

header h1 {
    font-size: 1.8em;
    font-weight: 700;
    margin: 0;
}

header h1 a {
    text-decoration: none;
    color: inherit;
    transition: color 0.3s ease;
}

header h1 a:hover {
    color: #f39c12;
}

nav ul {
    list-style: none;
    display: flex;
    gap: 20px;
    margin: 0;
    padding: 0;
}

nav ul li a {
    font-size: 1em;
    text-decoration: none;
    color: #555;
    font-weight: 500;
    transition: color 0.3s ease;
}

body.dark-mode nav ul li a {
    color: #aaa;
}

nav ul li a:hover {
    color: #f39c12;
}

/* Social Buttons Styling */
.social-buttons {
    display: flex;
    gap: 15px;
    align-items: center;
}

.social-buttons a i,
.social-buttons button i {
    font-size: 1.5em;
    color: #555;
    transition: color 0.3s ease, transform 0.3s ease;
}

body.dark-mode .social-buttons a i,
body.dark-mode .social-buttons button i {
    color: #aaa;
}

.social-buttons a:hover i,
.social-buttons button:hover i {
    color: #f39c12;
    transform: scale(1.1);
}

/* Theme Toggle Button */
.theme-toggle {
    cursor: pointer;
    background: none;
    border: none;
    transition: background-color 0.3s ease;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

body.light-mode .theme-toggle {
    background-color: #fff; /* White background in light mode */
}

body.dark-mode .theme-toggle {
    background-color: #000; /* Black background in dark mode */
}

.theme-toggle:hover {
    opacity: 0.8;
}

.theme-toggle #toggle-icon::before {
    content: "\f186"; /* Font Awesome sun icon */
    font-family: "Font Awesome 5 Free";
    font-weight: 900;
    font-size: 1.2em;
    color: #f39c12;
}

body.dark-mode .theme-toggle #toggle-icon::before {
    content: "\f186"; /* You can switch to a moon icon if preferred */
    color: #f39c12;
}

/* Hamburger Menu */
.hamburger {
    display: none; /* Hidden by default */
    flex-direction: column;
    justify-content: space-between;
    width: 25px;
    height: 20px;
    cursor: pointer;
}

.hamburger span {
    display: block;
    height: 3px;
    background-color: #333;
    border-radius: 2px;
    transition: all 0.3s ease;
}

body.dark-mode .hamburger span {
    background-color: #aaa;
}

.hamburger.active span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
}

.hamburger.active span:nth-child(2) {
    opacity: 0;
}

.hamburger.active span:nth-child(3) {
    transform: rotate(-45deg) translate(5px, -5px);
}

/* Hero Section */
#hero {
    background: url('images/hero-bg.jpg') no-repeat center center/cover; /* Updated path */
    color: #333; /* Dark text for light mode */
    text-align: center;
    padding: 150px 20px 100px; /* Adjusted padding */
    position: relative;
    transition: color 0.4s ease;
}

body.dark-mode #hero {
    background: url('images/hero-bg-dark.jpg') no-repeat center center/cover; /* Updated path */
    color: #fff; /* Light text for dark mode */
}

#hero h2 {
    font-size: 2.5em;
    margin-bottom: 20px;
    animation: fadeInDown 1s ease-in-out;
}

#hero p {
    font-size: 1.2em;
    margin-bottom: 30px;
}

#hero .btn {
    background-color: #f39c12;
    color: #fff;
    padding: 12px 25px;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1em;
    font-weight: 500;
    transition: background-color 0.3s ease;
}

body.dark-mode #hero .btn {
    background-color: #e67e22;
    color: #fff;
}

#hero .btn:hover {
    background-color: #e67e22;
}

body.dark-mode #hero .btn:hover {
    background-color: #d35400;
}

/* About Section */
#about {
    background: #fff;
    padding: 60px 20px;
    margin: 40px 0;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode #about {
    background: #2a2a2a;
    color: #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

.about-content {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
    align-items: center;
}

.profile-pic {
    flex: 1 1 250px;
    max-width: 250px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.about-text {
    flex: 2 1 400px;
}

.about-text p {
    margin-bottom: 20px;
    line-height: 1.6;
}

.countdown-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 10px;
}

.countdown-container input {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1em;
    background-color: inherit; /* Match the theme */
    color: inherit; /* Match the theme */
    transition: background-color 0.3s ease, color 0.3s ease;
}

.countdown-container input::-webkit-calendar-picker-indicator {
    filter: invert(1); /* Adjust for dark mode */
}

.countdown-container button {
    background-color: #f39c12;
    border: none;
    padding: 10px 20px;
    color: #fff;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 1em;
}

body.dark-mode .countdown-container button {
    background-color: #e67e22;
}

.countdown-container button:hover {
    background-color: #e67e22;
}

body.dark-mode .countdown-container button:hover {
    background-color: #d35400;
}

#countdown {
    font-size: 1.2em;
    color: #f39c12;
}

body.dark-mode #countdown {
    color: #e67e22;
}

/* Skills Section */
#skills {
    background: #fff;
    padding: 60px 20px;
    margin: 40px 0;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode #skills {
    background: #2a2a2a;
    color: #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

.skills-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
}

.skill {
    background: #fff;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode .skill {
    background: #3a3a3a;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
}

.skill:hover {
    transform: translateY(-5px);
    background-color: #f39c12;
    color: #fff;
}

.skill i {
    font-size: 2em;
    margin-bottom: 10px;
    transition: color 0.3s ease;
}

.skill h3 {
    margin-bottom: 10px;
    font-size: 1.2em;
}

.skill p {
    font-size: 0.95em;
}

/* Projects Section */
#projects {
    background: #fff;
    padding: 60px 20px;
    margin: 40px 0;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode #projects {
    background: #2a2a2a;
    color: #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

.projects-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 20px;
}

.project-card {
    background: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

body.dark-mode .project-card {
    background: #3a3a3a;
    box-shadow: 0 4px 8px rgba(0,0,0,0.3);
}

.project-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(0,0,0,0.2);
}

.project-card img {
    width: 100%;
    height: 200px;
    object-fit: cover;
}

.project-info {
    padding: 15px;
}

.project-info h3 {
    margin-top: 0;
    font-size: 1.5em;
}

.project-info p {
    font-size: 0.95em;
    margin-bottom: 15px;
}

.project-info .btn {
    background-color: #f39c12;
    color: #fff;
    padding: 8px 15px;
    text-decoration: none;
    border-radius: 5px;
    font-size: 0.95em;
    transition: background-color 0.3s ease;
}

body.dark-mode .project-info .btn {
    background-color: #e67e22;
    color: #fff;
}

.project-info .btn:hover,
.project-info .btn.disabled:hover {
    background-color: #e67e22;
}

body.dark-mode .project-info .btn:hover {
    background-color: #d35400;
}

.project-info .btn.disabled {
    background-color: #aaa;
    cursor: not-allowed;
    pointer-events: none;
    text-decoration: none;
}

/* Game Section */
#game {
    background: #fff;
    padding: 60px 20px;
    margin: 40px 0;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode #game {
    background: #2a2a2a;
    color: #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

#game h2 {
    font-size: 2em;
    margin-bottom: 20px;
}

#game p {
    font-size: 1.2em;
    margin-bottom: 30px;
}

#game .btn {
    background-color: #f39c12;
    color: #fff;
    padding: 12px 25px;
    text-decoration: none;
    border-radius: 5px;
    font-size: 1em;
    font-weight: 500;
    transition: background-color 0.3s ease;
}

body.dark-mode #game .btn {
    background-color: #e67e22;
    color: #fff;
}

#game .btn:hover {
    background-color: #e67e22;
}

body.dark-mode #game .btn:hover {
    background-color: #d35400;
}

/* Wiki Section */
#wiki {
    background: #fff;
    padding: 60px 20px;
    margin: 40px 0;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode #wiki {
    background: #2a2a2a;
    color: #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

#wiki h2 {
    margin-bottom: 20px;
    font-size: 2em;
}

#wiki-navigation {
    margin-bottom: 20px;
}

#wiki-search {
    width: 100%;
    max-width: 400px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1em;
    background-color: inherit; /* Match the theme */
    color: inherit; /* Match the theme */
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
}

#wiki-search:focus {
    border-color: #f39c12;
    outline: none;
}

#wiki-content {
    margin-top: 30px;
    /* Additional styling as needed */
}

#graph-container {
    margin-top: 30px;
    /* Additional styling for graph visualization */
}

/* Contact Section */
#contact {
    background: #fff;
    padding: 60px 20px;
    margin: 40px 0;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    transition: background-color 0.3s ease, color 0.3s ease;
}

body.dark-mode #contact {
    background: #2a2a2a;
    color: #ddd;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
}

#contact h2 {
    margin-bottom: 20px;
    font-size: 2em;
}

#contact p {
    margin-bottom: 30px;
    font-size: 1.2em;
}

#contact form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
    margin: auto;
}

.form-group {
    display: flex;
    flex-direction: column;
}

.form-group label {
    margin-bottom: 5px;
    font-weight: 500;
}

.form-group input,
.form-group textarea {
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 1em;
    background-color: inherit; /* Match the theme */
    color: inherit; /* Match the theme */
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
}

.form-group input:focus,
.form-group textarea:focus {
    border-color: #f39c12;
    outline: none;
}

#contact .btn {
    background-color: #f39c12;
    color: #fff;
    padding: 12px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    font-size: 1em;
    font-weight: 500;
    align-self: flex-start;
}

body.dark-mode #contact .btn {
    background-color: #e67e22;
    color: #fff;
}

#contact .btn:hover {
    background-color: #e67e22;
}

body.dark-mode #contact .btn:hover {
    background-color: #d35400;
}

.social-links {
    margin-top: 30px;
    display: flex;
    gap: 20px;
    justify-content: center;
}

.social-links a {
    color: #555;
    font-size: 1.5em;
    transition: color 0.3s ease, transform 0.3s ease;
}

body.dark-mode .social-links a {
    color: #aaa;
}

.social-links a:hover {
    color: #f39c12;
    transform: scale(1.1);
}

/* Footer */
footer {
    background: #333;
    color: #fff;
    padding: 20px 0;
    text-align: center;
}

footer nav a {
    color: #fff;
    text-decoration: none;
    margin: 0 10px;
    transition: color 0.3s ease;
}

footer nav a:hover {
    color: #f39c12;
}

footer p {
    margin: 10px 0 0;
    font-size: 0.9em;
}

/* Particle Background */
#particles-js {
    position: fixed;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    z-index: -1; /* Behind content */
}

/* Animations */
@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Responsive Design */
@media (max-width: 768px) {
    .about-content {
        flex-direction: column;
        align-items: center;
    }

    .profile-pic {
        max-width: 200px;
    }

    nav ul {
        flex-direction: column;
        gap: 10px;
        background: rgba(255, 255, 255, 0.95);
        position: absolute;
        top: 60px;
        right: 20px;
        border-radius: 5px;
        padding: 10px;
        display: none;
    }

    nav ul.show {
        display: flex;
    }

    .theme-toggle {
        margin-right: 0;
    }

    /* Hamburger Menu */
    .hamburger {
        display: flex;
    }

    /* Adjust social-buttons alignment */
    .social-buttons {
        gap: 10px;
    }
}

@media (max-width: 480px) {
    #hero h2 {
        font-size: 2em;
    }

    #hero p {
        font-size: 1em;
    }

    .skills-grid {
        grid-template-columns: 1fr;
    }

    .projects-grid {
        grid-template-columns: 1fr;
    }

    /* Reduce font size for social icons */
    .social-buttons a i,
    .social-buttons button i {
        font-size: 1.2em;
    }
}

/* Additional Styles for Hamburger Menu */
nav ul.show {
    display: flex;
}

.hamburger {
    z-index: 1001; /* Ensure hamburger is above the nav */
}

@media (max-width: 768px) {
    /* Ensure nav and social-buttons don't overlap */
    header {
        flex-wrap: wrap;
    }

    nav ul {
        width: 100%;
        top: 50px;
    }

    .social-buttons {
        order: 3;
        width: 100%;
        justify-content: center;
        margin-top: 10px;
    }
}


### File: D:\Website\GodfreyDev.github.io\js\main.js

// Define the Google Apps Script Web App URL
const WEB_APP_URL = 'https://script.google.com/macros/s/AKfycbyoKANgCs_Z8zF_PlzTwikZs7xBaxj4Ni-Uf1qNeRoXSBDlQZJLbeJ79NPraFZbektf/exec';

// Theme management functions
function setTheme(themeName) {
    localStorage.setItem('theme', themeName);
    document.body.className = themeName;
    updateToggleIcon();
    updateParticles();
}

function toggleTheme() {
    if (localStorage.getItem('theme') === 'dark-mode') {
        setTheme('light-mode');
    } else {
        setTheme('dark-mode');
    }
}

function loadTheme() {
    const theme = localStorage.getItem('theme');
    if (theme) {
        document.body.className = theme;
    } else {
        const prefersDarkScheme = window.matchMedia("(prefers-color-scheme: dark)").matches;
        setTheme(prefersDarkScheme ? 'dark-mode' : 'light-mode');
    }
    updateToggleIcon();
}

function updateToggleIcon() {
    const theme = localStorage.getItem('theme');
    const toggleIcon = document.getElementById('toggle-icon');
    if (theme === 'dark-mode') {
        // Sun icon for switching to light mode
        toggleIcon.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" 
                 stroke="currentColor" stroke-width="2" stroke-linecap="round" 
                 stroke-linejoin="round">
                <circle cx="12" cy="12" r="5"></circle>
                <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 
                         18.36l1.42 1.42M1 12h2M21 12h2M4.22 
                         19.78l1.42-1.42M18.36 5.64l1.42-1.42"></path>
            </svg>`;
    } else {
        // Moon icon for switching to dark mode
        toggleIcon.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" 
                 stroke="currentColor" stroke-width="2" stroke-linecap="round" 
                 stroke-linejoin="round">
                <path d="M21 12.79A9 9 0 1111.21 3a7.5 
                         7.5 0 009.79 9.79z"></path>
            </svg>`;
    }
}

// Particle management
function updateParticles() {
    const particleColor = localStorage.getItem('theme') === 'dark-mode' ? '#ffffff' : '#333333';

    // Check if particles.js has been initialized
    if (window.pJSDom && window.pJSDom.length > 0) {
        window.pJSDom[0].pJS.fn.vendors.destroypJS();
        window.pJSDom = [];
    }

    // Initialize particles.js again with the updated color
    particlesJS('particles-js', {
        "particles": {
            "number": {
                "value": 50,
                "density": {
                    "enable": true,
                    "value_area": 800
                }
            },
            "color": {
                "value": particleColor
            },
            "shape": {
                "type": "circle",
                "stroke": {
                    "width": 0,
                    "color": "#000000"
                },
                "polygon": {
                    "nb_sides": 5
                }
            },
            "opacity": {
                "value": 0.5,
                "random": false,
                "anim": {
                    "enable": false,
                    "speed": 1,
                    "opacity_min": 0.1,
                    "sync": false
                }
            },
            "size": {
                "value": 3,
                "random": true,
                "anim": {
                    "enable": false,
                    "speed": 40,
                    "size_min": 0.1,
                    "sync": false
                }
            },
            "line_linked": {
                "enable": true,
                "distance": 150,
                "color": particleColor,
                "opacity": 0.4,
                "width": 1
            },
            "move": {
                "enable": true,
                "speed": 6,
                "direction": "none",
                "random": false,
                "straight": false,
                "out_mode": "out",
                "bounce": false,
                "attract": {
                    "enable": false,
                    "rotateX": 600,
                    "rotateY": 1200
                }
            }
        },
        "interactivity": {
            "detect_on": "canvas",
            "events": {
                "onhover": {
                    "enable": true,
                    "mode": "grab"
                },
                "onclick": {
                    "enable": true,
                    "mode": "push"
                },
                "resize": true
            },
            "modes": {
                "grab": {
                    "distance": 140,
                    "line_linked": {
                        "opacity": 1
                    }
                },
                "bubble": {
                    "distance": 400,
                    "size": 40,
                    "duration": 2,
                    "opacity": 8,
                    "speed": 3
                },
                "repulse": {
                    "distance": 200,
                    "duration": 0.4
                },
                "push": {
                    "particles_nb": 4
                },
                "remove": {
                    "particles_nb": 2
                }
            }
        },
        "retina_detect": true
    });
}

// Countdown timer functions
function setCountdownDate() {
    const dateInput = document.getElementById('dateInput').value;
    if (dateInput) {
        localStorage.setItem('countdownDate', dateInput);
        startCountdown(dateInput);
    }
}

function startCountdown(date) {
    const countdownElement = document.getElementById('countdown');
    const targetDate = new Date(date).getTime();

    // Clear any existing intervals to prevent multiple timers
    if (window.countdownInterval) {
        clearInterval(window.countdownInterval);
    }

    window.countdownInterval = setInterval(() => {
        const now = new Date().getTime();
        const distance = targetDate - now;

        if (distance < 0) {
            clearInterval(window.countdownInterval);
            countdownElement.innerText = "The countdown is over!";
            return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        countdownElement.innerText = `${days}d ${hours}h ${minutes}m ${seconds}s`;
    }, 1000);
}

// OnlyFans Click Handler - Sends data to Google Sheets and displays updated count
async function handleOnlyFansClick() {
    const onlyFansMessage = document.getElementById('onlyfans-message');

    try {
        onlyFansMessage.innerText = `⌛ Processing...`;
        onlyFansMessage.style.display = 'block';

        const response = await fetch(WEB_APP_URL, {
            method: 'POST',
            mode: 'cors', // Ensure CORS is allowed on the server-side
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ action: 'increment' }) // Customize as per your API
        });

        const result = await response.json();

        if (result.success) {
            onlyFansMessage.innerText = `😏 You've clicked this button ${result.count} time${result.count > 1 ? 's' : ''}. Naughty, naughty...`;
        } else {
            onlyFansMessage.innerText = `❌ Error: ${result.message}`;
        }
    } catch (error) {
        onlyFansMessage.innerText = `❌ Error: ${error.message}`;
    }
}


// Ensure that handleOnlyFansClick is accessible globally
window.handleOnlyFansClick = handleOnlyFansClick;

// Hamburger Menu for Mobile Navigation
function initializeHamburgerMenu() {
    const hamburger = document.querySelector('.hamburger');
    const navMenu = document.querySelector('nav ul');

    hamburger.addEventListener('click', () => {
        hamburger.classList.toggle('active');
        navMenu.classList.toggle('show');
        const expanded = hamburger.classList.contains('active');
        hamburger.setAttribute('aria-expanded', expanded);
    });

    // Close the menu when a link is clicked
    const navLinks = document.querySelectorAll('nav ul li a');
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            if (navMenu.classList.contains('show')) {
                navMenu.classList.remove('show');
                hamburger.classList.remove('active');
                hamburger.setAttribute('aria-expanded', false);
            }
        });
    });
}

// Initialize Countdown Timer
function initializeCountdown() {
    const savedDate = localStorage.getItem('countdownDate');
    if (savedDate) {
        startCountdown(savedDate);
        document.getElementById('dateInput').value = savedDate;
    }
}

// On DOM content loaded
document.addEventListener('DOMContentLoaded', () => {
    loadTheme();
    updateParticles();
    initializeHamburgerMenu();
    initializeCountdown();

    const dateInputElement = document.getElementById('dateInput');
    const storedCountdownDate = localStorage.getItem('countdownDate');

    if (storedCountdownDate) {
        dateInputElement.value = storedCountdownDate;
        startCountdown(storedCountdownDate);
    }

    dateInputElement.addEventListener('change', setCountdownDate);
 });


### File: D:\Website\GodfreyDev.github.io\js\particles.json

{
    "particles": {
        "number": {
            "value": 50,
            "density": {
                "enable": true,
                "value_area": 800
            }
        },
        "color": {
            "value": "#333333"
        },
        "shape": {
            "type": "circle",
            "stroke": {
                "width": 0,
                "color": "#000000"
            },
            "polygon": {
                "nb_sides": 5
            }
        },
        "opacity": {
            "value": 0.5,
            "random": false,
            "anim": {
                "enable": false,
                "speed": 1,
                "opacity_min": 0.1,
                "sync": false
            }
        },
        "size": {
            "value": 3,
            "random": true,
            "anim": {
                "enable": false,
                "speed": 40,
                "size_min": 0.1,
                "sync": false
            }
        },
        "line_linked": {
            "enable": true,
            "distance": 150,
            "color": "#333333",
            "opacity": 0.4,
            "width": 1
        },
        "move": {
            "enable": true,
            "speed": 6,
            "direction": "none",
            "random": false,
            "straight": false,
            "out_mode": "out",
            "bounce": false,
            "attract": {
                "enable": false,
                "rotateX": 600,
                "rotateY": 1200
            }
        }
    },
    "interactivity": {
        "detect_on": "canvas",
        "events": {
            "onhover": {
                "enable": true,
                "mode": "grab"
            },
            "onclick": {
                "enable": true,
                "mode": "push"
            },
            "resize": true
        },
        "modes": {
            "grab": {
                "distance": 140,
                "line_linked": {
                    "opacity": 1
                }
            },
            "bubble": {
                "distance": 400,
                "size": 40,
                "duration": 2,
                "opacity": 8,
                "speed": 3
            },
            "repulse": {
                "distance": 200,
                "duration": 0.4
            },
            "push": {
                "particles_nb": 4
            },
            "remove": {
                "particles_nb": 2
            }
        }
    },
    "retina_detect": true
}


### File: D:\Website\GodfreyDev.github.io\js\wiki.js

// # js/wiki.js

// CORS Proxy to bypass CORS restrictions
const corsProxy = 'https://cors-anywhere.herokuapp.com/';

// Mapping of wiki pages to their Google Drive download URLs
const wikiFiles = {
    "Home": "https://drive.google.com/uc?export=download&id=FILE_ID_1",
    "Getting Started": "https://drive.google.com/uc?export=download&id=FILE_ID_2",
    "Project 1": "https://drive.google.com/uc?export=download&id=FILE_ID_3",
    "Tutorials": {
        "Tutorial 1": "https://drive.google.com/uc?export=download&id=FILE_ID_4",
        "Tutorial 2": "https://drive.google.com/uc?export=download&id=FILE_ID_5"
    }
};

// Function to fetch and render markdown content
async function fetchAndRenderMarkdown(url, containerId, linkElement = null) {
    try {
        const response = await fetch(corsProxy + url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const markdown = await response.text();
        const rawHtml = marked.parse(markdown);
        const sanitizedHtml = DOMPurify.sanitize(rawHtml);
        document.getElementById(containerId).innerHTML = sanitizedHtml;
        // Remove 'active' class from all links
        document.querySelectorAll('#wiki-navigation a').forEach(a => a.classList.remove('active'));
        // Add 'active' class to the current link
        if (linkElement) {
            linkElement.classList.add('active');
        }
    } catch (error) {
        console.error('Error fetching markdown:', error);
        document.getElementById(containerId).innerHTML = '<p>Error loading content.</p>';
    }
}

// Function to build navigation based on wikiFiles
function buildWikiNavigation(wikiObj, parentElement) {
    const ul = document.createElement('ul');

    for (const [key, value] of Object.entries(wikiObj)) {
        const li = document.createElement('li');
        if (typeof value === 'string') {
            const a = document.createElement('a');
            a.href = "#";
            a.textContent = key;
            a.addEventListener('click', (e) => {
                e.preventDefault();
                fetchAndRenderMarkdown(value, 'wiki-content', a);
            });
            li.appendChild(a);
        } else if (typeof value === 'object') {
            const span = document.createElement('span');
            span.textContent = key;
            li.appendChild(span);
            buildWikiNavigation(value, li); // Recursive call for nested items
        }
        ul.appendChild(li);
    }

    parentElement.appendChild(ul);
}

// Function to extract links from markdown (for graph)
function extractLinks(markdown) {
    const linkPattern = /\[\[([^\]]+)\]\]/g;
    let match;
    const links = [];
    while ((match = linkPattern.exec(markdown)) !== null) {
        links.push(match[1]);
    }
    return links;
}

// Function to build graph data
async function buildGraphData() {
    const nodes = new Set();
    const edges = [];

    for (const [key, value] of Object.entries(wikiFiles)) {
        if (typeof value === 'string') {
            nodes.add(key);
            try {
                const response = await fetch(corsProxy + value);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const markdown = await response.text();
                const links = extractLinks(markdown);
                links.forEach(link => {
                    nodes.add(link);
                    edges.push({ from: key, to: link });
                });
            } catch (error) {
                console.error(`Error fetching markdown for ${key}:`, error);
            }
        } else if (typeof value === 'object') {
            for (const [subKey, subValue] of Object.entries(value)) {
                nodes.add(subKey);
                try {
                    const response = await fetch(corsProxy + subValue);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const markdown = await response.text();
                    const links = extractLinks(markdown);
                    links.forEach(link => {
                        nodes.add(link);
                        edges.push({ from: subKey, to: link });
                    });
                } catch (error) {
                    console.error(`Error fetching markdown for ${subKey}:`, error);
                }
            }
        }
    }

    // Convert nodes to array of objects
    const nodesArray = Array.from(nodes).map(node => ({ id: node, label: node }));

    return { nodes: nodesArray, edges: edges };
}

// Function to render graph
async function renderGraph() {
    const graphData = await buildGraphData();

    const container = document.getElementById('graph-container');
    const data = {
        nodes: new vis.DataSet(graphData.nodes),
        edges: new vis.DataSet(graphData.edges)
    };
    const options = {
        layout: {
            improvedLayout: true
        },
        physics: {
            stabilization: false
        },
        interaction: {
            navigationButtons: true,
            keyboard: true
        }
    };
    const network = new vis.Network(container, data, options);

    // Handle node clicks to display content
    network.on("click", function (params) {
        if (params.nodes.length > 0) {
            const nodeId = params.nodes[0];
            if (wikiFiles[nodeId]) {
                // Direct link
                fetchAndRenderMarkdown(wikiFiles[nodeId], 'wiki-content', null);
            } else {
                // Possibly in nested objects
                let found = false;
                for (const [key, value] of Object.entries(wikiFiles)) {
                    if (typeof value === 'object' && value[nodeId]) {
                        fetchAndRenderMarkdown(value[nodeId], 'wiki-content', null);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    document.getElementById('wiki-content').innerHTML = '<p>Page not found.</p>';
                }
            }
        }
    });
}

// Initialize the wiki on page load
document.addEventListener('DOMContentLoaded', () => {
    const navContainer = document.getElementById('wiki-navigation');
    buildWikiNavigation(wikiFiles, navContainer);
    // Load the Home page by default
    fetchAndRenderMarkdown(wikiFiles["Home"], 'wiki-content', null);
    // Render the graph
    renderGraph();
});
